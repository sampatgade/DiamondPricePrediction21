const AssessmentService = {
  getQuizzes: async (requestObj, isLoggedIn, pageNumber, pageSize) => {
    if (isLoggedIn) {
      return seekhoRequest.post({
        url: `/spark/rest/admin/v1/quizzes/filter?&pageNumber=${pageNumber}&pageSize=${pageSize}`,
        requestObject: requestObj,
        isAuthorized: true
      })
    } else {
      return seekhoRequest.post({
        url: `/spark/public/api/quizzes/filter?&pageNumber=${pageNumber}&pageSize=${pageSize}`,
        requestObject: requestObj
      })
    }
  },
  getQuizByKey: async (eKey) => {
    return seekhoRequest.get({url: `/spark/rest/admin/v1/content/key/${eKey}`, isAuthorized: true})
  },
  startAssessment: async (quizHash, parentHash) => {
    return seekhoRequest.post({
      url: `/spark/rest/admin/v2/assessment/${quizHash}/start?parentHash=${parentHash}`,
      isAuthorized: true
    })
  },
  saveSelectedOption: async (requestObject) => {
    return seekhoRequest.post({
      url: `/spark/rest/admin/v2/assessment/save/option`,
      requestObject,
      isAuthorized: true,
      isTokenPresent: true,
      isRequestObjectPresent: true
    })
  },
  questionTimedOut: async (requestObject) => {
    return seekhoRequest.post({
      url: `/spark/rest/admin/v2/assessment/question/timed-out`,
      requestObject,
      isAuthorized: true,
      isTokenPresent: true,
      isRequestObjectPresent: true
    })
  },
  saveAndEvaluate: async ({quizHash, parentHash}) => {
    return seekhoRequest.post({
      url: `/spark/rest/admin/v2/assessment/${quizHash}/evaluate?parentHash=${parentHash}`,
      isAuthorized: true
    })
  },
  getNextQuestion: async ({quizHash, parentHash}) => {
    return seekhoRequest.post({
      url: `/spark/rest/admin/v2/assessment/${quizHash}/next-question?parentHash=${parentHash}`,
      isAuthorized: true
    })
  },
  quizAnswers: async (quizHash, parentHash, userHash) => {
    return seekhoRequest.get({
      url: `/spark/rest/admin/v2/assessment/${quizHash}/${userHash}/answers?parentHash=${parentHash}`,
      isAuthorized: true
    })
  },
  getQuizWinner: async (quizHash, pageNumber = 1, pageSize = 100) => {
    return seekhoRequest.get({url: `/spark/public/api/quizzes/quiz-winners?assessmentHash=${quizHash}&pageNumber=${pageNumber}&pageSize=${pageSize}`})
  },
  getLifetimeWinners: async () => {
    return seekhoRequest.get({url: `/spark/public/api/quizzes/quiz-winners/lifetime`})
  },
  getRecentWinners: async () => {
    return seekhoRequest.get({url: `/spark/public/api/quizzes/quiz-winners/recent`})
  },
  checkAccessCode: async ({accessCode, quizHash}) => {
    return seekhoRequest.get({
      url: `/spark/rest/admin/v1/quizzes/check-access-code?accessCode=${accessCode}&assessmentHash=${quizHash}`,
      isAuthorized: true,
    })
  },
  fetchResult: async ({assessmentHash, userHash, parentHash = null}) => {
    return seekhoRequest.get({
      url: `/spark/rest/admin/v2/assessment/${assessmentHash}/${userHash}/evaluation?parentHash=${parentHash}`,
      isAuthorized: true,
    })
  },
  saveEvaluationFeedback: async ({evaluationHash, evaluationFeedback}) => {
    return seekhoRequest.post({
      url: `/spark/rest/admin/v2/assessment/${evaluationHash}/evaluation-feedback`,
      isAuthorized: true,
      requestString: evaluationFeedback
    });
  },
  evaluateQuestion: async (requestObject) => {
    return seekhoRequest.post({
      url: `/spark/rest/admin/v1/m/assessment/evaluate/question`,
      isAuthorized: true,
      requestObject
    })
  },
  evaluateAdminQuestion: async ({hash, userHash, parentHash = null}) => {
    return seekhoRequest.post({
      url: parentHash ? `/spark/rest/admin/v1/m/assessment/${hash}/evaluate?parentHash=${parentHash}&userHash=${userHash}` : `/spark/rest/admin/v1/m/assessment/${hash}/evaluate?userHash=${userHash}`,
      isAuthorized: true
    })
  },
  getMultipleAssessmentResult: async ({ userHash, assessmentHashList }) => {
    const assessmentHashes = assessmentHashList?.join(',');
    return seekhoRequest.get({
      url: `/spark/rest/admin/v2/assessment/${userHash}/multiple-evaluations?assessmentHashList=${assessmentHashes}`, isAuthorized:true
    });
  }


}



