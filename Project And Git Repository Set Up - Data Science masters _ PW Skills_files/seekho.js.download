function hasNetwork(online) {
	if (online) {
		// $('.internet-status-container').hide();
	} else {
		// $('.internet-status-container').show();
	}
}

function getPlatform() {
	let platform = "25"; // DESKTOP_WEB
	var userAgent = navigator.userAgent || navigator.vendor || window.opera;
	if (/iPad|iPhone|iPod/.test(userAgent) && !window.MSStream) {
		platform = "20"; // WEB (Mobile Web)
	} else if (/android/i.test(userAgent)) {
		platform = "20"; // WEB (Mobile Web)
	}
	return platform;
}

window.addEventListener("load", () => {
	hasNetwork(navigator.onLine);
});

// export function usePaginatedApi(apiRequest){
// 	let data = {};
// 	let isFetching = false;
// 	let isFetchingMore = false;
// 	const request = async (...args) => {
// 		isFetching = true;
// 		const response = await apiRequest(...args)
// 		data = response;
// 		isFetching = false;
// 		return response
// 	}
//
// 	const loadMoreRequest = async (...args) => {
// 		isFetchingMore = true;
// 		const response = await apiRequest(...args)
// 		data = {
// 			...response,
// 			data: data.data.concat(response.data)
// 		}
// 		isFetchingMore = false;
// 		return response
// 	}
//
//
// 	return {
// 		data,
// 		isFetching,
// 		isFetchingMore,
// 		request,
// 		loadMoreRequest,
// 	}
// }

function setCookie(cname, cvalue, exsecs) {
	var d = new Date();
	d.setTime(d.getTime() + (exsecs * 1000));
	var expires = "expires=" + d.toUTCString();
	document.cookie = cname + "=" + encodeURIComponent(cvalue) + ";" + expires + ";path=/";
	setGlobalTokenVariable()
}

function getCookie(cname) {
	var name = cname + "=";
	var decodedCookie = decodeURIComponent(document.cookie);
	var ca = decodedCookie.split(';');
	for (var i = 0; i < ca.length; i++) {
		var c = ca[i];
		while (c.charAt(0) === ' ') {
			c = c.substring(1);
		}
		if (c.indexOf(name) === 0) {
			return c.substring(name.length, c.length);
		}
	}
	return "";
}

function getUrlParameter(sParam) {
	let sPageURL = window.location.search.substring(1),
			sURLVariables = sPageURL.split('&'),
			sParameterName,
			i;
	
	for (i = 0; i < sURLVariables.length; i++) {
		sParameterName = sURLVariables[i].split('=');
		
		if (sParameterName[0] === sParam) {
			return typeof sParameterName[1] === undefined ? true : decodeURIComponent(sParameterName[1]);
		}
	}
	return false;
}

function fetchUserDetails() {
	return new Promise((resolve, reject) => {
		$.ajax({
			type: "GET",
			contentType: "application/json",
			url: lmsDomain + "/spark/rest/admin/v1/users/profile",
			headers: {
				"account-id": "131",
				"Authorization": token ? 'Bearer ' + token : ''
			},
			dataType: 'json',
			cache: true,
			timeout: 60000,
			success: function (data) {
				resolve(data)
			},
			error: function (e) {
				reject(e);
			}
		});
	})
}

const getSeekhoSelectRedirectUrl = (userTags = []) => {
	const tagStr = userTags.map((tag) => tag.name).toString();
	const urlByUserTag = Object.keys(SEEKHO_SELECT_URL).find((key) => {
		return tagStr.toLowerCase().indexOf(key.toLowerCase()) !== -1
	});
	return SEEKHO_SELECT_URL[urlByUserTag] || SEEKHO_SELECT_URL.FINANCE
};

function getUserDetails(token) {
	return new Promise((resolve, reject) => {
		$.ajax({
			type: "GET",
			contentType: "application/json",
			url: authServer + "/rest/admin/v1/users/whoami",
			headers: {
				"account-id": "131",
				"authorization": 'Bearer ' + token
			},
			dataType: 'json',
			cache: true,
			timeout: 60000,
			success: function (data) {
				if (data !== null) {
					const { data: whoAmIResponse = {} } = data;
					localStorage.setItem('user_info', JSON.stringify(whoAmIResponse));
					resolve(whoAmIResponse);
				} else {
					alert(data.error.message);
					reject(data);
				}
			},
			error: function (e) {
				if (e && e.status === 401) {
					var cookies = document.cookie.split(";");
					cookies.forEach(function (c) {
						document.cookie = c.replace(/^ +/, "").replace(/=.*/, "=;expires=" + new Date().toUTCString() + ";path=/");
					});
					window.localStorage.clear();
					window.location.href = '/logout';
				}
				reject(e);
			}
		})
	});
};

const userInterestedSkillsId = [];

async function getUserInterestedSkillsId() {
	const userDetails = await fetchUserDetails();
	const { data = {} } = userDetails || {};
	if (Object.keys(data).length > 0) {
		if (data.attributes
				&& data.attributes.interested_skills
				&& data.attributes.interested_skills.length > 0
		) {
			let userInterestedSkills = data.attributes.interested_skills[0];
			userInterestedSkills.map(skills => {
				userInterestedSkillsId.push(skills.id);
			});
			return userInterestedSkills;
		}
	}
	return []
}

function getDisplayDuration(duration, ignoreZero = false) {
	if (duration === null) return '';

	if (ignoreZero && duration === 0) return '';

	if (duration < 1) return duration;

	const minutesInDay = 1440;
	const minutesInMonth = 43200;
	const minutesInYear = 525600;

	let years = Math.floor(duration / minutesInYear);
	let months = Math.floor((duration % minutesInYear) / minutesInMonth);
	let days = Math.floor(((duration % minutesInYear) % minutesInMonth) / minutesInDay);
	let hours = Math.floor(((duration % minutesInYear) % minutesInMonth) % minutesInDay / 60);
	let minutes = Math.floor(duration % 60);

	let displayString = '';
	if (years > 0) displayString += `${years} ${years === 1 ? 'Year' : 'Years'}`;
	if (months > 0) displayString += ` ${months} ${months === 1 ? 'Month' : 'Months'}`;
	if (days > 0) displayString += ` ${days} ${days === 1 ? 'Day' : 'Days'}`;
	if (hours > 0) displayString += ` ${hours} ${hours === 1 ? 'Hour' : 'Hours'}`;
	if (minutes > 0) displayString += ` ${minutes} ${minutes === 1 ? 'Min.' : 'Mins.'}`;

	return displayString.trim();
}


function getTimeRemaining(time) {
	const total = time - Date.now();
	if (total < 1) {
		return 'Closed'
	}
	const minutes = Math.floor((total / 1000 / 60) % 60);
	const hours = Math.floor((total / (1000 * 60 * 60)) % 24);
	const days = Math.floor(total / (1000 * 60 * 60 * 24));
	if (days > 0) {
		return days > 1 ? days + ' days left' : days + ' day left';
	}
	
	if (hours > 0) {
		return hours > 1 ? hours + ' hours left' : hours + ' hour left';
	}
	
	if (minutes > 0) {
		return minutes > 1 ? minutes + ' minutes left' : minutes + ' minute left';
	}
	return '';
}

function getUserToken({ phone = '', email = '', otp = '' }) {
	var requestObject = new FormData();
	if (phone !== "") {
		requestObject.append("phone", phone);
		requestObject.append("uc", "1");
	}
	if (email !== "") {
		requestObject.append("email", email);
		requestObject.append("uc", "7");
	}
	requestObject.append("otp", otp);
	return new Promise((resolve, reject) => {
		$.ajax({
			type: "POST",
			url: authServer + "/oauth/otp/token",
			data: requestObject,
			headers: {
				"account-id": "131",
				"utm-headers": getUtmHeaders(),
				"x-provider-src-app" : getPlatform()
			},
			cache: false,
			contentType: false,
			processData: false,
			timeout: 60000,
			success: function (data) {
				resolve(data);
			},
			error: function (e) {
				alert("Error");
				reject(e);
			}
		})
	})
}

async function checkContactExistence({ phone, email }) {
	const response = await checkIfUserExists({ phone: phone, email: email });
	return response.data;
}

function getFormValue(className) {
	const result = $(className).map((i, e) => e.value).get().filter(e => e !== "");
	return result.length > 0 ? result[0] : "";
}

function createNewUser({ isPhone = false, phone = '', email = '', userOtp = '', userName = '' }) {
	const name = userName.length > 0 ? userName : getFormValue('.userName');
	const otp = userOtp.length > 0 ? userOtp : getFormValue('.userOTP');
	const referralCode = getFormValue('.referralCode');
	const referrerModule = getFormValue('.referrerModule');
	const orgId = sessionStorage.getItem('onboarding-orgId')
	if (otp.length === 4 && name.length > 1) {
		let requestObject = {};
		requestObject["otp"] = otp.trim();
		requestObject["name"] = name;
		requestObject["referrerModule"] = referrerModule ? referrerModule : "SEEKHO_WEB";
		requestObject["phoneSignUp"] = isPhone;
		requestObject["referralCode"] = referralCode;
		if (isPhone) {
			requestObject["phone"] = phone.trim();
			requestObject["useCase"] = 1;
		} else {
			requestObject["email"] = email.trim();
			requestObject["useCase"] = 7;
		}
		if (orgId != null) {
			requestObject["orgId"] = orgId;
		}
    requestObject["redirectUrl"] = document.referrer;
		return new Promise((resolve, reject) => {
			$.ajax({
				type: "POST",
				contentType: "application/json",
				url: authServer + "/rest/admin/v1/users/signup",
				data: JSON.stringify(requestObject),
				headers: {
					"account-id": "131",
					"utm-headers": getUtmHeaders(),
					"x-provider-src-app" : getPlatform()
				},
				dataType: 'json',
				cache: false,
				timeout: 60000,
				success: function (data) {
					const { data: userData = {} } = data || {};
					resolve(userData);
				},
				error: function (e) {
					alert(e.responseJSON.error.message);
					reject(e)
				}
			})
		})
	}
}

async function getProfileHandle(uniqueUserName) {
	const data = await checkIfUserExists({ userName: uniqueUserName });
	return data;
}

function attachResumeToProfile(data) {
	return new Promise((resolve, reject) => {
		$.ajax({
			type: "PATCH",
			contentType: "application/json",
			url: authServer + "/rest/admin/v1/users/update/resume",
			headers: {
				"account-id": 131,
				"authorization": 'Bearer ' + token,
				"utm-headers": getUtmHeaders(),
				"x-provider-src-app" : getPlatform()
			},
			dataType: 'json',
			data: JSON.stringify(data),
			cache: false,
			timeout: 60000,
			success: function (data) {
				resolve(data)
			},
			error: function (e) {
				reject(e);
			}
		});
	})
}


function attachVisumeToProfile(data) {
	return new Promise((resolve, reject) => {
		$.ajax({
			type: "PATCH",
			contentType: "application/json",
			url: lmsDomain + "/spark/rest/admin/v1/users/update/visume",
			headers: {
				"account-id": 131,
				"authorization": 'Bearer ' + token,
				"utm-headers": getUtmHeaders(),
				"x-provider-src-app" : getPlatform()
			},
			dataType: 'json',
			data: JSON.stringify(data),
			cache: false,
			timeout: 60000,
			success: function (data) {
				resolve(data)
			},
			error: function (e) {
				reject(e);
			}
		});
	})
}

function updateUserProfile(data) {
	return new Promise((resolve, reject) => {
		$.ajax({
			type: "PATCH",
			contentType: "application/json",
			url: authServer + "/rest/admin/v2/users/update/profile",
			headers: {
				"account-id": 131,
				"authorization": 'Bearer ' + token,
				"utm-headers": getUtmHeaders(),
				"x-provider-src-app" : getPlatform()
			},
			dataType: 'json',
			data: JSON.stringify(data),
			cache: false,
			timeout: 60000,
			success: function (data) {
				resolve(data)
			},
			error: function (e) {
				$('.save-profile-btn').attr('disabled', false);
				reject(e);
			}
		});
	})
}

function checkReferralCodeValidity(code) {
	return new Promise((resolve, reject) => {
		$.ajax({
			type: "GET",
			contentType: "application/json",
			url: authServer + "/rest/admin/v1/users/valid/referral?userReferral=" + code,
			headers: {
				"account-id": 131,
				"utm-headers": getUtmHeaders(),
				"x-provider-src-app" : getPlatform()
			},
			dataType: 'json',
			cache: true,
			timeout: 60000,
			success: function (data) {
				$('.referral-code-success').show();
				$('.referral-code-error').hide();
				resolve(data)
			},
			error: function (e) {
				const { responseJSON = {} } = e;
				const { error } = responseJSON;
				if (error.message) {
					$('.referral-code-error').text(error.message);
				}
				$('.referral-code-success').hide();
				$('.referral-code-error').show();
				reject(e);
			}
		});
	})
}

function updateUserAttributes(access_token, userHash, userData) {
	const res = {
		userAttributes: {
			...userData
		}
	}
	return new Promise((resolve, reject) => {
		$.ajax({
			type: "PATCH",
			contentType: "application/json",
			url: lmsDomain + "/spark/rest/admin/v1/users/update/" + userHash,
			headers: {
				"account-id": 131,
				"authorization": 'Bearer ' + token,
				"utm-headers": getUtmHeaders(),
				"x-provider-src-app" : getPlatform()
			},
			dataType: 'json',
			data: JSON.stringify(res),
			cache: false,
			timeout: 60000,
			success: function (data) {
				console.log(data, 'data')
				resolve(data)
			},
			error: function (e) {
				reject(e);
			}
		});
	})
}

function markContactInvalid(userHash, email) {
	let markInvalid = '';
	if (email !== '') {
		markInvalid = "EMAIL";
	} else {
		markInvalid = "PHONE";
	}
	return new Promise((resolve, reject) => {
		$.ajax({
			type: "PATCH",
			contentType: "application/json",
			url: authServer + "/rest/admin/v1/users/mark/invalid/" + userHash + "?useCase=" + markInvalid,
			headers: {
				"account-id": "131",
				"Authorization": 'Bearer ' + token
			},
			dataType: 'json',
			cache: false,
			timeout: 60000,
			success: async function (data) {
				console.log('invalid success')
				resolve(data);
			},
			error: function (e) {
				reject(e)
				alert("Contact couldn't be marked invalid!");
			}
		})
	})
}

function validateOTP(email, phone, otp) {
	let otpOn = "", useCase = "";
	if (phone != '') {
		otpOn = "phone=" + phone;
		useCase = "1";
	} else {
		otpOn = "email=" + email;
		useCase = "7";
	}
	return new Promise((resolve, reject) => {
		$.ajax({
			type: "GET",
			contentType: "application/json",
			url: authServer + "/rest/admin/v1/otp/validate?" + otpOn + "&otp=" + otp + "&uc=" + useCase,
			headers: {
				"account-id": "131",
				"utm-headers": getUtmHeaders(),
				"x-provider-src-app" : getPlatform()
			},
			dataType: 'json',
			cache: true,
			timeout: 60000,
			success: function (data) {
				resolve(data);
			},
			error: function (e) {
				console.log("Wrong OTP!");
			}
		});
	});
}

function joinLiveSession(sessionId) {
	const userInfo = JSON.parse(window.localStorage.getItem('user_info'));
	const { userId = '' } = userInfo || {};
	window.open(lmsDomain + '/spark/live-content/join-now' + `/${sessionId}?acid=131&uid=${userId}`, '_blank');
}

function cancelBookedSession(contentHash, sessionId) {
	let url = lmsDomain + "/spark/rest/admin/v1/live-content/unenroll/instance?contentHash=" + contentHash + "&lciId=" + sessionId;
	return new Promise((resolve, reject) => {
		$.ajax({
			type: "GET",
			contentType: "application/json",
			url: url,
			headers: {
				"account-id": "131",
				"authorization": "Bearer " + token,
				"utm-headers": getUtmHeaders(),
				"x-provider-src-app" : getPlatform()
			},
			dataType: 'json',
			cache: true,
			timeout: 60000,
			success: function (data) {
				window.location.reload();
			},
			error: function (e) {
				reject(e);
				alert('Error');
			}
		});
	})
}


function getCertiDownloadPermission(contentHash) {
	let url = "/spark/rest/admin/v1/assignments/issue/certificate/" + contentHash;
	return new Promise((resolve, reject) => {
		$.ajax({
			type: "GET",
			contentType: "application/json",
			url: lmsDomain + url,
			headers: {
				"account-id": "131",
				authorization: token ? 'Bearer ' + token : '',
				"utm-headers": getUtmHeaders(),
				"x-provider-src-app" : getPlatform()
			},
			dataType: 'json',
			cache: true,
			timeout: 60000,
			success: function (data) {
				resolve(data)
			},
			error: function (e) {
				reject(e);
				alert('Error');
			}
		});
	})
}

function getCertiDownloadUrl(contentHash) {
	let url = "/spark/rest/admin/v1/certificate/download/" + contentHash;
	return new Promise((resolve, reject) => {
		$.ajax({
			type: "GET",
			contentType: "application/json",
			url: lmsDomain + url,
			headers: {
				"account-id": "131",
				authorization: token ? 'Bearer ' + token : '',
				"utm-headers": getUtmHeaders(),
				"x-provider-src-app" : getPlatform()
			},
			dataType: 'json',
			cache: true,
			timeout: 60000,
			success: function (data) {
				resolve(data)
			},
			error: function (e) {
				reject(e);
				alert('Error');
			}
		});
	})
}

async function checkCertiDownload(content) {
	if (token) {
		const { assignedContentTrackerStats = {} } = content || {};
		const { trackerStatus = '' } = assignedContentTrackerStats || {};
		if (trackerStatus === "FINISHED") {
			const res = await getCertiDownloadPermission(content.hash);
			const { data = false } = res || {};
			if (data) {
				$('.download-certi').show();
			}
		}
	}
}

function getDateTimeInDesiredFormat(timeStamp, format = 'DD MMM YYYY - hh:mm a') {
	return moment(parseInt(timeStamp, 10)).tz(moment.tz.guess(true)).format(format);
}